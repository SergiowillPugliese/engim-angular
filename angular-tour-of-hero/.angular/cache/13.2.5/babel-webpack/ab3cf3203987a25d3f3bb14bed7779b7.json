{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let HeroService = /*#__PURE__*/(() => {\n  class HeroService {\n    constructor( //inietto la classe \"MessageService\" e la immagazzino dentro la\n    // variabile messageService\n    messageService, http) {\n      this.messageService = messageService;\n      this.http = http;\n      this.heroesUrl = 'api/heroes'; // URL to web api\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    } //funzione che poi potrò richiamare dal controller\n\n\n    getHeroes() {\n      //return this.http.get('url-con-i-dati)  -> qst se avro una url per un API\n      return this.http.get(this.heroesUrl) //gestione dell'errore\n      .pipe(tap(() => this.log(\"Heroservice: fetched heroes\")), catchError(error => {\n        console.error(error);\n        this.log(`getHero failed: ${error.message}`);\n        let response = [];\n        return of(response);\n      })); //  this.log(\"Heroservice: fetched heroes\");\n      // return HEROES;\n    }\n\n    getHero(selectedId) {\n      // For now, assume that a hero with the specified `id` always exists.\n      // Error handling will be added in the next step of the tutorial.\n      //const HERO = HEROESMOCKDATA.find(h => h.id === selectedId)!;\n      //this.log(`fetched hero id=${selectedId}`);\n      //return of(HERO);\n      return this.http.get(this.heroesUrl + '/' + selectedId).pipe(tap(_ => this.log(`fetched hero id = ${selectedId}`)), catchError(error => {\n        this.log(`getHero id = ${selectedId} failed ${error.status}: ${error.body.error}`);\n        return of();\n      }));\n    }\n    /** PUT: update the hero on the server */\n\n\n    updateHero(hero) {\n      return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(error => {\n        console.error(error);\n        this.log(`updateHero failed: ${error.message}`);\n        let response = [];\n        return of(response);\n      }));\n    }\n    /** Log a HeroService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n\n  }\n\n  HeroService.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  HeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeroService;\n})();","map":null,"metadata":{},"sourceType":"module"}